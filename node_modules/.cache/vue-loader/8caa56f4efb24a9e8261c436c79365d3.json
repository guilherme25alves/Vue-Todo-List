{"remainingRequest":"C:\\Users\\Gui\\Desktop\\Gui\\Estudos\\Vue.js\\ProjetoInicial\\todo\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Gui\\Desktop\\Gui\\Estudos\\Vue.js\\ProjetoInicial\\todo\\src\\views\\Home.vue?vue&type=style&index=0&id=fae5bece&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Gui\\Desktop\\Gui\\Estudos\\Vue.js\\ProjetoInicial\\todo\\src\\views\\Home.vue","mtime":1592947546637},{"path":"C:\\Users\\Gui\\Desktop\\Gui\\Estudos\\Vue.js\\ProjetoInicial\\todo\\node_modules\\css-loader\\dist\\cjs.js","mtime":1592350867469},{"path":"C:\\Users\\Gui\\Desktop\\Gui\\Estudos\\Vue.js\\ProjetoInicial\\todo\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1592350868353},{"path":"C:\\Users\\Gui\\Desktop\\Gui\\Estudos\\Vue.js\\ProjetoInicial\\todo\\node_modules\\postcss-loader\\src\\index.js","mtime":1560374961074},{"path":"C:\\Users\\Gui\\Desktop\\Gui\\Estudos\\Vue.js\\ProjetoInicial\\todo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1592350849716},{"path":"C:\\Users\\Gui\\Desktop\\Gui\\Estudos\\Vue.js\\ProjetoInicial\\todo\\node_modules\\vue-loader\\lib\\index.js","mtime":1592350868353}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi8qIFRhZyBzY29wZWQgYWRpY2lvbmFkYSBxdWVyIGRpemVyIHF1ZSBlc3NlIHN0eWxlIMOpIGFwbGljYWRvIHNvbWVudGUgcGFyYSBlc3RlIGNvbXBvbmVudGUgKi8KLnRvZG8tbGlzdHsKICBwYWRkaW5nLXRvcDogMnJlbTsKfQo="},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkFA;AACA;AACA;AACA","file":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n    <div class=\"container grid-xs py-2\">\r\n      <form @submit.prevent=\"add(todo)\"> \r\n          <!-- @submit.prevnent (Forma de se atribuir um method do Vue para o form\r\n        . O prevent é usado para evitar o reload da tela quando o form é submetido)\r\n        Referenciar o elemento todo no método (o parâmetro que definimos no script, dento do method)-->\r\n        <div class=\"input-group\">\r\n          <input type=\"text\" v-model=\"todo.description\" class=\"form-input\" placeholder=\"Novo todo\">\r\n          <button class=\"btn btn-primary input-group-btn\" :class=\"{loading}\">Adicionar</button>\r\n        </div>\r\n      </form>\r\n        <!-- Forma de printar um dado pelo Vue.js \r\n        {{ todos }}\r\n        -->\r\n        <div class=\"todo-list\">\r\n          <!-- v-for (foreach nos elementos) 0 :key é o identificador unico para o vue não se perder no laço -->\r\n          <!-- Essa tag todo faz referência ao contéudo do componente Todo que vai ser renderizado-->\r\n          <todo v-for=\"task in todos\" :key=\"task.id\" @toggle=\"toggleTodo\" @remove=\"removeTodo\" :todo=\"task\"></todo>\r\n          <!-- @toggle é o evento que foi emitido pelo Componente filho (Todo.vue) ao clicar no botão concluído \r\n          @<nome-do-evento> : É a forma de se recuperar os eventos emitidos pelo $emit do Componente filho\r\n            Recuperamos esse evento emitido e atribuimos algum método pra ele pra gerar alguma ação -->\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n// Importando o componente da lista, que inicialmente ficava nessa mesma View\r\n// Temos que referenciar ele também dentro do components no export default do Script \r\nimport Todo from '@/components/Todo'\r\n// Usamos o @ para ele pegar o endereço do arquivo a partir da pasta SRC\r\n\r\n// Com o mapActions podemos mapear melhor nossos states/ mutations\r\n// mapActions mapeamos as ações os métodos para add, remover, toggle, entre outros\r\n// mapState mapeamos os estados, as propriedades que guardam valores e podem ser alterados seus comportamentos e valores\r\nimport { mapActions, mapState } from 'vuex'\r\n\r\nexport default {\r\n  name: 'App',\r\n  data(){\r\n    //Utilizando o Vuex\r\n    return {  todo: { checked: false} }; \r\n\r\n  },\r\n  computed:{\r\n    \r\n    ...mapState(['todos', 'loading'])\r\n\r\n    //--> Já mapeado no mapState\r\n    //todos(){\r\n    //  return this.$store.state.todos;\r\n    //},\r\n    //--> Já mapeado no mapState\r\n    //loading(){\r\n    //  return this.$store.state.loading;\r\n    //}\r\n  },\r\n  methods: {\r\n\r\n    ...mapActions(['addTodo', 'toggleTodo', 'removeTodo']),\r\n\r\n    async add(todo){\r\n          // Como a action addTodo tá mapeada trocamos o codigo abaixo pelo descomentado\r\n          //await this.$store.dispatch('addTodo', todo) \r\n          this.todo = { checked: false };         \r\n    },\r\n    \r\n    //--> Já mapeada agora com o mapActions\r\n    //toggleTodo(todo){\r\n    //     this.$store.dispatch('toggleTodo', todo);   \r\n    //},\r\n    //--> Já mapeada também com o mapActions\r\n    //removeTodo(todo){\r\n    // this.$store.dispatch('removeTodo', todo);\r\n    //},\r\n  },\r\n  components: {\r\n     Todo\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n  /* Tag scoped adicionada quer dizer que esse style é aplicado somente para este componente */\r\n  .todo-list{\r\n    padding-top: 2rem;\r\n  }\r\n</style>\r\n"]}]}